name: Tengine-Lite-Actions

on: [push, pull_request]

jobs:
  linux-gcc:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: update
      run: sudo apt-get update
    - name: protobuf
      run: sudo apt-get install libopencv-dev    
    - name: configure
      run: mkdir build && cd build && cmake -DTENGINE_BUILD_TESTS=ON ..
    - name: build
      run: cmake --build build -j 2
    - name: models
      run: |
        wget --load-cookies /tmp/cookies.txt "https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&id=1HOLaLy0ZTcFmxbVFxr116U1nIYwqhZg5' -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')&id=1HOLaLy0ZTcFmxbVFxr116U1nIYwqhZg5" -O models.zip && rm -rf /tmp/cookies.txt
        unzip models.zip

    - name: test
      run: ./build/tests/tm_classify -n squeezenet

  linux-gcc-arm:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    - name: cache-qemu
      id: cache-qemu
      uses: actions/cache@v1
      with:
        path: qemu-install
        key: qemu-arm-install-1
    - name: checkout-qemu
      if: steps.cache-qemu.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        repository: qemu/qemu
        path: qemu
        ref: 8746309137ba470d1b2e8f5ce86ac228625db940
    - name: qemu
      if: steps.cache-qemu.outputs.cache-hit != 'true'
      run: |
        cd qemu
        ./configure --prefix=install --target-list=arm-linux-user --disable-system
        make -j2
        make install
        cp -r arm-linux-user/install $GITHUB_WORKSPACE/qemu-install
    - name: arm-gnu-toolchain
      run: |
        sudo apt-get update
        sudo apt-get install g++-arm-linux-gnueabi
    - name: configure
      run: mkdir build && cd build && cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/arm-linux-gnueabi.toolchain.cmake -DTENGINE_BUILD_TESTS=ON ..
    - name: build
      run: cmake --build build -j 2
    - name: models
      run: |
        wget --load-cookies /tmp/cookies.txt "https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&id=1HOLaLy0ZTcFmxbVFxr116U1nIYwqhZg5' -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')&id=1HOLaLy0ZTcFmxbVFxr116U1nIYwqhZg5" -O models.zip && rm -rf /tmp/cookies.txt
        unzip models.zip

    - name: test
      run: |
        export PATH=$GITHUB_WORKSPACE/qemu-install/bin:$PATH
        ./tests/test_arm32.sh 


  linux-gcc-aarch64:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    - name: cache-qemu
      id: cache-qemu
      uses: actions/cache@v1
      with:
        path: qemu-install
        key: qemu-aarch64-install-1
    - name: checkout-qemu
      if: steps.cache-qemu.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        repository: qemu/qemu
        path: qemu
        ref: 8746309137ba470d1b2e8f5ce86ac228625db940
    - name: qemu
      if: steps.cache-qemu.outputs.cache-hit != 'true'
      run: |
        cd qemu
        ./configure --prefix=install --target-list=aarch64-linux-user --disable-system
        make -j2
        make install
        cp -r aarch64-linux-user/install $GITHUB_WORKSPACE/qemu-install
    - name: aarch64-gnu-toolchain
      run: |
        sudo apt-get update
        sudo apt-get install g++-aarch64-linux-gnu
    - name: configure
      run: mkdir build && cd build && cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/aarch64-linux-gnu.toolchain.cmake -DTENGINE_BUILD_TESTS=ON ..
    - name: build
      run: cmake --build build -j 2
    - name: models
      run: |
        wget --load-cookies /tmp/cookies.txt "https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&id=1HOLaLy0ZTcFmxbVFxr116U1nIYwqhZg5' -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')&id=1HOLaLy0ZTcFmxbVFxr116U1nIYwqhZg5" -O models.zip && rm -rf /tmp/cookies.txt
        unzip models.zip

    - name: test
      run: |
        export PATH=$GITHUB_WORKSPACE/qemu-install/bin:$PATH
        ./tests/test_arm64.sh 
        

  linux-gcc-avx2:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: update
      run: sudo apt-get update
    - name: protobuf
      run: sudo apt-get install libopencv-dev    
    - name: configure
      run: mkdir build && cd build && cmake -DTENGINE_AVX2=ON ..
    - name: build
      run: cmake --build build -j 2      


  android-armv7-a:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: configure
      run: mkdir build && cd build && cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_ABI="armeabi-v7a" -DANDROID_PLATFORM=android-19 ..
    - name: build
      run: cmake --build build -j 2


  android-armv8-a:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: configure
      run: mkdir build && cd build && cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_ABI="arm64-v8a" -DANDROID_PLATFORM=android-21 ..
    - name: build
      run: cmake --build build -j 2
